name: Release scenexec

on:
  workflow_dispatch:

env:
  TAG: v1.5.22

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-20.04, macos-12]
        include:
          - os: ubuntu-20.04
            wasmer_lib: libwasmer_linux_amd64.so
            wasmer2_lib: libvmexeccapi.so
          - os: macos-12
            wasmer_lib: libwasmer_darwin_amd64.dylib
            wasmer2_lib: libvmexeccapi.dylib

    runs-on: ${{ matrix.os }}

    steps:
      - name: Use Golang
        uses: actions/setup-go@v4
        with:
          go-version: 1.19

      - name: Build binary
        run: |
          git clone https://github.com/multiversx/mx-chain-vm-go
          cd mx-chain-vm-go
          git checkout tags/${{ env.TAG }}
          cd cmd/test
          go build -o scenexec -ldflags "-extldflags '-Wl,-rpath,\$ORIGIN'"

      - name: Package binary
        run: |
          mkdir -p scenexec
          cp mx-chain-vm-go/cmd/test/scenexec scenexec/scenexec
          cp mx-chain-vm-go/wasmer/${{ matrix.wasmer_lib }} scenexec/${{ matrix.wasmer_lib }}
          cp mx-chain-vm-go/wasmer2/${{ matrix.wasmer2_lib }} scenexec/${{ matrix.wasmer2_lib }}
          tar -czvf scenexec-${{ env.TAG }}-${{ matrix.os }}.tar.gz scenexec

      - name: Test binary
        run: cd scenexec && ./scenexec .

      - name: Upload binary
        uses: actions/upload-artifact@v3
        with:
          name: scenexec
          path: scenexec-${{ env.TAG }}-${{ matrix.os }}.tar.gz

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download binaries
        uses: actions/download-artifact@v3
        with:
          name: scenexec

      - name: Create release
        uses: ncipollo/release-action@v1
        with:
          artifacts: scenexec-*
          tag: scenexec-${{ env.TAG }}
